// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  bankAccount   BankAccount?
  Company       Company[]
}

model BankAccount {
  id                String @id @default(cuid())
  owner             User   @relation(fields: [ownerId], references: [id])
  ownerId           String @unique
  accountName       String
  image             String
  password          String
  bankAccountNumber String
  email             String

  balance Int

  transactions   Transaction[]
  subAccount     SubAccount[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  QuickSendMoney QuickSendMoney[]
}

model Transaction {
  id     String @id @default(cuid())
  amount Int

  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  receiverBankAccountId String?

  transactionType TransactionType

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  product   String?

  subAccount   SubAccount? @relation(fields: [subAccountId], references: [id])
  subAccountId String?

  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([bankAccountId])
  @@index([companyId])
  @@index([subAccountId])
}

model SubAccount {
  id       String @id @default(cuid())
  name     String
  password String

  balance           Int
  creditCard_number String
  creditCard_color  String

  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  transaction     Transaction[]
  subAccountToken subAccountToken[]

  @@index([bankAccountId])
}

model subAccountToken {
  id           String     @id @default(cuid())
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id])
  subAccountId String
  token        String
  Company      Company    @relation(fields: [companyId], references: [id])
  companyId    String
  limit        Int

  @@index([subAccountId])
  @@index([companyId])
}

// model SubAccountLoggedIn {
//   id            String      @id @default(cuid())
//   bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
//   bankAccountId String
//   subAccount    SubAccount  @relation(fields: [subAccountId], references: [id])
//   subAccountId  String

//   company   RegisteredCompany @relation(fields: [companyId], references: [id])
//   companyId String
//   createdAt DateTime          @default(now())

//   @@index([bankAccountId])
//   @@index([companyId])
//   @@index([subAccountId])
// }

model QuickSendMoney {
  id                 String      @id @default(cuid())
  bankAccountId      String
  savedBankAccount   BankAccount @relation(fields: [savedBankAccountId], references: [id])
  savedBankAccountId String

  @@index([savedBankAccountId])
}

model Company {
  id           String        @id @default(cuid())
  logo         String?
  name         String
  email        String
  transactions Transaction[]
  createdAt    DateTime      @default(now())

  balance Int

  subAccountToken subAccountToken[]
  apiKey          APIKey[]

  websiteUrl String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@index([ownerId])
}

model APIKey {
  id        String   @id @default(cuid())
  key       String
  secret    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())

  @@unique([companyId], name: "OneToOneCompanyAPIKey")
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  SPEND
  SEND
  ADD
  TAKE
}
