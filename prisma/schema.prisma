// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  bankAccount   BankAccount?
  Application   Application[]
}

model BankAccount {
  id                String @id @default(cuid())
  owner             User   @relation(fields: [ownerId], references: [id])
  ownerId           String @unique
  accountName       String
  image             String
  password          String
  bankAccountNumber String
  email             String

  balance Int

  transactions         Transaction[]    @relation("bankAccountTransaction")
  recievedTransactions Transaction[]    @relation("recievedTransaction")
  subAccount           SubAccount[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  QuickSendMoney       QuickSendMoney[]
}

model Transaction {
  id            String      @id @default(cuid())
  amount        Int
  bankAccountId String
  bankAccount   BankAccount @relation("bankAccountTransaction", fields: [bankAccountId], references: [id])

  receiverBankAccountId String?
  receiverBankAccount   BankAccount? @relation("recievedTransaction", fields: [receiverBankAccountId], references: [id])

  transactionType TransactionType

  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  productName   String?
  productId     String?

  subAccount   SubAccount? @relation(fields: [subAccountId], references: [id])
  subAccountId String?

  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([bankAccountId])
  @@index([applicationId])
  @@index([subAccountId])
  @@index([receiverBankAccountId])
}

model SubAccount {
  id       String  @id @default(cuid())
  name     String
  password String?

  balance           Int
  creditCard_number String
  creditCard_color  String

  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  transaction     Transaction[]
  subAccountToken subAccountToken[]

  @@index([bankAccountId])
}

model subAccountToken {
  id            String      @id @default(cuid())
  subAccount    SubAccount  @relation(fields: [subAccountId], references: [id])
  subAccountId  String
  token         String
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  limit         Int

  @@index([subAccountId])
  @@index([applicationId])
}

model QuickSendMoney {
  id                 String      @id @default(cuid())
  bankAccountId      String
  savedBankAccount   BankAccount @relation(fields: [savedBankAccountId], references: [id])
  savedBankAccountId String

  @@index([savedBankAccountId])
}

model Application {
  id            String        @id @default(cuid())
  applicationId String
  logo          String
  name          String
  email         String
  transactions  Transaction[]
  createdAt     DateTime      @default(now())

  balance Int

  subAccountTokens subAccountToken[]
  apiKey           APIKey[]

  websiteUrl String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@index([ownerId])
}

model APIKey {
  id            String      @id @default(cuid())
  key           String
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  createdAt     DateTime    @default(now())

  @@unique([applicationId], name: "OneToOneApplicationtoAPIKey")
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  SPEND
  SEND
  ADD
  TAKE
}
